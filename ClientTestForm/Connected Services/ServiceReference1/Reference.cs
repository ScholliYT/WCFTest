//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientTestForm.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/plus", ReplyAction="http://tempuri.org/ITestService/plusResponse")]
        double plus(double _a, double _b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/plus", ReplyAction="http://tempuri.org/ITestService/plusResponse")]
        System.Threading.Tasks.Task<double> plusAsync(double _a, double _b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/minus", ReplyAction="http://tempuri.org/ITestService/minusResponse")]
        double minus(double _a, double _b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/minus", ReplyAction="http://tempuri.org/ITestService/minusResponse")]
        System.Threading.Tasks.Task<double> minusAsync(double _a, double _b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/mal", ReplyAction="http://tempuri.org/ITestService/malResponse")]
        double mal(double _a, double _b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/mal", ReplyAction="http://tempuri.org/ITestService/malResponse")]
        System.Threading.Tasks.Task<double> malAsync(double _a, double _b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/geteilt", ReplyAction="http://tempuri.org/ITestService/geteiltResponse")]
        double geteilt(double _a, double _b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/geteilt", ReplyAction="http://tempuri.org/ITestService/geteiltResponse")]
        System.Threading.Tasks.Task<double> geteiltAsync(double _a, double _b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : ClientTestForm.ServiceReference1.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<ClientTestForm.ServiceReference1.ITestService>, ClientTestForm.ServiceReference1.ITestService {
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double plus(double _a, double _b) {
            return base.Channel.plus(_a, _b);
        }
        
        public System.Threading.Tasks.Task<double> plusAsync(double _a, double _b) {
            return base.Channel.plusAsync(_a, _b);
        }
        
        public double minus(double _a, double _b) {
            return base.Channel.minus(_a, _b);
        }
        
        public System.Threading.Tasks.Task<double> minusAsync(double _a, double _b) {
            return base.Channel.minusAsync(_a, _b);
        }
        
        public double mal(double _a, double _b) {
            return base.Channel.mal(_a, _b);
        }
        
        public System.Threading.Tasks.Task<double> malAsync(double _a, double _b) {
            return base.Channel.malAsync(_a, _b);
        }
        
        public double geteilt(double _a, double _b) {
            return base.Channel.geteilt(_a, _b);
        }
        
        public System.Threading.Tasks.Task<double> geteiltAsync(double _a, double _b) {
            return base.Channel.geteiltAsync(_a, _b);
        }
    }
}
